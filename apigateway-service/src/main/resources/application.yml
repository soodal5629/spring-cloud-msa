server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  config:
    import: "optional:configserver:http://localhost:8888"
  application:
    name: apigateway-service
  rabbitmq: # rabbitmq 접속
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    config:
      name: ecommerce # ecommerce.yml 데이터 가져오기
      profile: dev
    gateway:
      default-filters: # 공통 필터 (global filter)
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE # 유레카 서버를 통해 MS discovery
#          predicates: # 조건
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # 헤더값 초기화 (post 데이터를 매번 새로운 데이터처럼 인식하기 위해)
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users # 회원가입
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/** # 로그인, 회원가입 이외의 모든 서비스
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter # jwt 유효성, 인증 및 로그인 된 회원인지 확인

        - id: catalog-service
          uri: lb://CATALOG-SERVICE # 유레카 서버를 통해 MS discovery
          predicates: # 조건
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE # 유레카 서버를 통해 MS discovery
          predicates: # 조건
            - Path=/order-service/**
        - id: first-service
          uri: lb://MY-FIRST-SERVICE # 유레카 서버를 통해 MS discovery
          predicates: # 조건
            - Path=/first-service/**
          filters:
            - CustomFilter
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
        - id: second-service
          uri: lb://MY-SECOND-SERVICE # 유레카 서버를 통해 MS discovery
          predicates: # 조건
            - Path=/second-service/** # 이 path가 uri 뒤에 그대로 붙음
          filters:
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there
                preLogger: true
                postLogger: true
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh

#token:
#  secret: user_token